//Функция — это блок кода JavaScript, который определяется однажды,
// но мо­жет выполняться, или вызываться, любое количество раз

//Стрелочные функции
const sum = (х, у) => { return х + у }
console.log(sum(1, 2))
//если  тело функции представляет собой одиночный оператор return , тогда можно опустить ключевое слово return 
const sum1 = (х, у) => х + у;
console.log(sum1(1, 2))
//функция имеет в точности один параметр, то круглые скобки вокруг списка параметров можно опустить
const polynomial = х => х * х + 2 * х + 3;
console.log(polynomial(1))
//стрелочная функция без параметров должна быть записана с пустой парой круглых скобок
const constantFunc = () => 42;
console.log(constantFunc())

//функции могут быть вложенными внутри других функций
function hypotenuse(a, b) {
    let x = a
    function square(х) { return х * х; }
    return Math.sqrt(square(a) + square(b));
}
console.log(hypotenuse(1, 2))

//Метод — это функция  которая хранится в свойстве объекта
//функцию funj и объект obje
let obje = {}
const funj = obje => {
    console.log('obje ')
}
obje.m = funj//метод по имени m объекта obje можно следующим образом:
obje.m() // после орпеделения метода можно его вызвать
//obje.m(x,y)//если метод m () ожидает передачи двух аргументов, тогда он вызывается так

//this  вызова метода подобного рода объект становится контекстом вызова
// и в теле функции можно ссылаться на этот объ­ект с применением ключевого слова this 
//this — это ключевое слово, не имя переменной или свойства
let calculator = { // Объектный литерал
    operand1: 1,
    operand2: 1,
    add() {
        // Для этой функции мы используем сокращенный
        // синтаксис методов
        // Обратите внимание на применение ключевого слова this
        // для ссылки на вмещающий объект.
        let rr = this.result = this.operand1 + this.operand2;
        console.log(rr)// Вызов метода для вычисления 1+1
    }
}
calculator.add()


//пример  сложные выражения до­ступа к свойствам
//customer.surname.toUpperCase(); // Вызов метода на customer. surname
//f().m();// Вызов метода m () на возвращаемом значении f ()

// Вызов конструктора - вызов функции или метода предваряется ключевым словом new

// Необязательные параметры и стандартные значения
function getPropertyNames(ob, ad) {
    if (ad === undefined) ad = [];// Если undefined, то использовать новый массив
    for (let property in ob) ad.push(property);
    return ad;
}
// getPropertyNames () может вызываться с одним или двумя аргументами:
let ob = { х: 1 }, р = { у: 2, z: 3 }; // Два объекта для тестирования
let ad = getPropertyNames(ob);// а == ["х”]; получить свойства о в новом массиве
console.log(getPropertyNames(р, ad))// а == ["х","у","z"]; добавить к нему свойства р